{"version":3,"sources":["components/ShowWeather.jsx","components/img/sky.png","components/Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["ShowWeather","props","data","console","log","icons","weather","icon","className","name","sys","country","Date","toLocaleTimeString","Math","floor","main","temp","src","alt","description","temp_max","temp_min","humidity","pressure","visibility","sunrise","sunset","Weather","weatherKey","useState","city","form","setForm","setWeather","e","a","preventDefault","alert","fetch","then","res","json","handleChange","target","value","type","placeholder","onChange","onClick","weatherData","undefined","style","backgroundImage","background","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.736753ac.chunk.js","sourcesContent":["// Created a new component that will pass weather data into this component\n\nimport React from 'react'\n\n\nfunction ShowWeather(props) {\n  // console.log(\"props\", props);\n  const {data} = props; \n  console.log(data); \n\n  // eslint-disable-next-line no-useless-concat\n  const icons = 'http://openweathermap.org/img/wn/' + `${data.weather[0].icon}` + '.png'\n\n  return (\n    <div className= \"displayweather\">\n      <div className=\"maincard\">\n        <span className=\"cardtitle\">\n          {data.name}, {data.sys.country}. Weather :\n        </span>\n        &nbsp; &nbsp; \n        <span className=\"cardsubtitle\">\n          As of : {new Date().toLocaleTimeString()}\n        </span>\n        <h1>\n          {Math.floor(((data.main.temp - 273) * 1.8) + 32)}\n          <sup>o</sup>\n        </h1>\n        <span className=\"weather-main\">\n          {data.weather[0].main}\n        </span>\n        <img src={icons} className=\"weather-icon\" alt = \"\"/>\n        <span className=\"weather-description\">\n          {data.weather[0].description}\n        </span>\n      </div>\n\n      <div className=\"weatherdetails\">\n        <div className=\"tableOne\">\n          <table>\n            <tr>\n              <td>\n                <h4>High/Low = </h4>\n              </td>\n              <td>\n                <span>\n                  {Math.floor(((data.main.temp_max - 273) * 1.8) + 32)} <sup>o</sup> F /{\" \"}\n                  {Math.floor(((data.main.temp_min - 273) * 1.8) + 32)} <sup>o</sup> F\n                </span>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <h4>Humidity = </h4>\n              </td>\n              <td>\n                <span>\n                  \n                  {data.main.humidity} %\n                </span>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <h4>Pressure = </h4>\n              </td>\n              <td>\n                <span>\n                  {data.main.pressure} hPa\n                </span>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <h4>Visibility = </h4>\n              </td>\n              <td>\n                <span>\n                  {data.visibility * 0.00062137119224} Mi\n                </span>\n              </td>\n            </tr>\n          </table>\n        </div>\n      </div>\n      \n      <div className=\"tableTwo\">\n        <table>\n          <tr>\n            <td>\n              <h4>Sunrise = </h4>\n            </td>\n            <td>\n              <span>{new Date(data.sys.sunrise * 1000 ).toLocaleTimeString()}</span>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <h4>Sunset = </h4>\n            </td>\n            <td>\n              <span>{new Date(data.sys.sunset * 1000).toLocaleTimeString()}</span>\n            </td>\n          </tr>\n        </table>\n      </div>\n\n    </div>\n  )\n}\n\nexport default ShowWeather\n\n// Create a div with class name of display weather. Have a main card div that will contain the card title which spands the data.name and data.sys.country, thereby displaying the weather. \n// In the second psan labeled cardsubtitle, use new Date () to display date, and then .toLocaleTimeString method to display the current time. \n// Create an h1 and within pass the props of {data.main.temp} in order to show the temperature. \n// Googled how to convert kelvin to farenheit since data is displayed only in kelvin using math.floor. \n// used super tag to enclose o for temp symbol\n// created tables in order to render information on the screen","export default __webpack_public_path__ + \"static/media/sky.333712b3.png\";","import React, { useState } from 'react';\nimport ShowWeather from './ShowWeather';\nimport './weatherstyle.css'\nimport background from './img/sky.png'\n\n\n// using functional components over class components due to ease of use. \n// Here we import useState from react and then set const [form, setForm] to useState\nfunction Weather() {\n  // create a variable to will hold api weather key\nconst weatherKey = '5162a3caf9bbd39fc2394c2ab186c5d0';\n\n\n\nconst [form,setForm] = useState({\n  city:\"\", \n  country: \"\"\n});\nconst [weather, setWeather] = useState([])\n\n// using asynchronous function in order to fetch data from weather API. If the input is empty, alert the user. else, create variable data and use await fetch in order to retrieve data of city from API. Use template strings here (like pokemon API) \n// use .then to create a promise that will get response (res) and log it in JSON format. \nasync function weatherData(e) {\n\n\n  e.preventDefault();\n  if(form.city === \"\" || form.country === \"\") {\n    alert(\"Please fill out both forms\");\n  } else {\n    const data = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${form.city},${form.country}&appid=${weatherKey}`)\n    // this allows the whole object to be printed to the console. \n    .then((res) => res.json())\n    .then((data) => data);\n\n    // assign data to setWeather state\n    setWeather(\n      {\n        data : data\n      }\n    );\n  }\n}\n\n// function that will handle changes\nconst handleChange = (e) => {\n  let name = e.target.name; \n  let value = e.target.value; \n// if name is city,  set value of city in the form state, use spread operator to set form to form and city:value\n  if(name === \"city\") {\n    setForm({...form, city:value})\n  }\n// The smae logic is applied to the country:value\n  if(name === \"country\") {\n    setForm({...form, country:value})\n  }\n  // Test---> print out the result using form.city and form.country\n  // console.log(form.city, form.country)\n};\n\n  return (\n    <div className = \"weather\">\n      <span className=\"title\">\n        Weather React App\n      </span>\n      <br/>\n\n      <form >\n        {/* invoke handleChange function here while passing the event with arrow function */}\n        <input type=\"text\" name=\"city\" placeholder=\"city\" onChange={e => handleChange(e)}/>\n        {/* add spaces using  nonbreaking space (HTML entity)*/}\n        &nbsp; &nbsp; \n        <input type=\"text\" name=\"country\" placeholder=\"country\" onChange={e => handleChange(e)}/>\n        {/* evoke onClick function, pass event to weatherData */}\n        <button className=\"getWeather\" onClick={e => weatherData(e)}>Submit</button>\n      </form>\n\n      {/* Ternary: If weather.data is not undefined, render the ShowWeather component, else display null */}\n      {\n        weather.data !== undefined ? \n        <div style={{backgroundImage: `url(${background})`}}>\n          <ShowWeather data={weather.data}/>\n        </div>\n        : null\n      }\n     \n    </div>\n  );\n}\n\nexport default Weather;\n\n","import './App.css';\nimport Weather from './components/Weather'\nimport './components/weatherstyle.css'\nimport background from './components/img/sky.png'\n\nfunction App() {\n  return (\n    <div style={{backgroundImage: `url(${background})`}} className=\"App\">\n      {/* Create a header named weather app */}\n      <Weather  />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}